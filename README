Couple toughts about the game refactoring
-----------------------------------------

Implementation structure

- Class Environment:
  RL-Style state + action + reward implementation.
  Potentially optimization helpful.
  One-play. Defines Legal actions and state transition. An action is "legal" if
  it is possible to take that action (in a given state). "Illegal" actions are
  bit-representations of the "Action" class which do not represent possible
  actions. Every state has at least one "legal" action, the "none" action. If
  the the "none" Actions is present, it MUST be the only available action. The
  "none" action only occurs in terminal states.
- Class Game:
  Game-style one-by-one selection of dice to put aside + ending turn.
  No optimization required, more or less anything goes.

Environment Implementation bases:
(Completely *unsanitized*)

- Class state:
  Representation of RL-style state.
  Internal representation of the environment.
- Class Throw:
  Representation of a set of thrown digits (rather than dice). No link to
  individual dice and/or die positions is made.
- Class Action:
  Representatino of an RL-style action: The set of digits to be put aside (=
  Throw) + a boolean decision to re-roll or finish the turn.
  Additionally, a consistent "no action" representation that matches no other
  action.

Game Implementation bases:
(With runtime sanitization, where approprite, when using environment)

- Class Dice.
  Representing an ordered tuple of dice, each with it's individual digits

- Class Cup
  Combining the classes "Throw" and "Dice" into a combined representation.
  Ensuring that the "Dice" and "Throw" subobject remain consistent.
  Basically equals the "Dice" class, but keeps a consistent throw
  representation in the background.
  Expanding the die representation by allowing to put aside dice. Dice that are
  put aside will not be rolled by the roll() member.

Subtypes

- Digit
  Unsigned integral type for short values, representing the shown digit of a die.
- Die
- Player
- ... (see dice.h using declarations)


  Checklist:
    - Action      [x]
    - Cup         [x]
    - Dice        [x]
    - Digit       [x] // typedef
    - Environment [x]
    - Game        [x]
    - State       [x]
    - Throw       [x]
